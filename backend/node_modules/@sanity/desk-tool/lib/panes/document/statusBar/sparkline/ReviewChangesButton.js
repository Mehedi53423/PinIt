"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReviewChangesButton = void 0;

var _hooks = require("@sanity/base/hooks");

var _icons = require("@sanity/icons");

var _reactHooks = require("@sanity/react-hooks");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _useDocumentPane2 = require("../../useDocumentPane");

var _AnimatedSyncIcon = require("./AnimatedSyncIcon.styled");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ReviewChangesButton = /*#__PURE__*/(0, _react.forwardRef)(function ReviewChangesButton(props, ref) {
  var lastUpdated = props.lastUpdated;
  var lastUpdatedTime = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true
  });
  var lastUpdatedTimeAgo = (0, _hooks.useTimeAgo)(lastUpdated || '', {
    minimal: true,
    agoSuffix: true
  });

  var _useDocumentPane = (0, _useDocumentPane2.useDocumentPane)(),
      documentId = _useDocumentPane.documentId,
      documentType = _useDocumentPane.documentType,
      handleHistoryClose = _useDocumentPane.handleHistoryClose,
      handleHistoryOpen = _useDocumentPane.handleHistoryOpen,
      changesOpen = _useDocumentPane.changesOpen;

  var syncState = (0, _reactHooks.useSyncState)(documentId, documentType);
  return /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    portal: true,
    content: /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      padding: 3,
      space: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      weight: "semibold"
    }, "Review changes"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1,
      muted: true
    }, "Changes saved ", lastUpdatedTimeAgo))
  }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
    "aria-label": "Review changes",
    mode: "bleed",
    tone: "caution",
    padding: 3,
    onClick: changesOpen ? handleHistoryClose : handleHistoryOpen,
    ref: ref,
    selected: changesOpen
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    marginRight: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 2
  }, syncState.isSyncing ? /*#__PURE__*/_react.default.createElement(_AnimatedSyncIcon.AnimatedSyncIcon, null) : /*#__PURE__*/_react.default.createElement(_icons.EditIcon, null))), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "medium"
  }, lastUpdatedTime || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "\xA0")))));
});
exports.ReviewChangesButton = ReviewChangesButton;