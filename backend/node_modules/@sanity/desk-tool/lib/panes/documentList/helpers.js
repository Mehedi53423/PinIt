"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDocumentKey = getDocumentKey;
exports.getTypeNameFromSingleTypeFilter = getTypeNameFromSingleTypeFilter;
exports.isSimpleTypeFilter = isSimpleTypeFilter;
exports.removePublishedWithDrafts = removePublishedWithDrafts;
exports.toOrderClause = toOrderClause;

var _draftUtils = require("part:@sanity/base/util/draft-utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getDocumentKey(value, index) {
  return value._id ? (0, _draftUtils.getPublishedId)(value._id) : "item-".concat(index);
}

function removePublishedWithDrafts(documents) {
  return (0, _draftUtils.collate)(documents).map(entry => {
    var doc = entry.draft || entry.published;
    return _objectSpread(_objectSpread({}, doc), {}, {
      hasPublished: !!entry.published,
      hasDraft: !!entry.draft
    });
  });
} // export function getDocumentKey(document: DocumentListPaneItem): string {
//   return getPublishedId(document._id)
// }


var RE_TYPE_NAME_IN_FILTER = /\b_type\s*==\s*(['"].*?['"]|\$.*?(?:\s|$))|\B(['"].*?['"]|\$.*?(?:\s|$))\s*==\s*_type\b/;

function getTypeNameFromSingleTypeFilter(filter) {
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var matches = filter.match(RE_TYPE_NAME_IN_FILTER);

  if (!matches) {
    return null;
  }

  var match = (matches[1] || matches[2]).trim().replace(/^["']|["']$/g, '');

  if (match[0] === '$') {
    var k = match.slice(1);
    var v = params[k];
    return typeof v === 'string' ? v : null;
  }

  return match;
}

function isSimpleTypeFilter(filter) {
  return /^_type\s*==\s*['"$]\w+['"]?\s*$/.test(filter.trim());
}

function toOrderClause(orderBy) {
  return orderBy.map(ordering => [ordering.field, (ordering.direction || '').toLowerCase()].map(str => str.trim()).filter(Boolean).join(' ')).join(',');
}