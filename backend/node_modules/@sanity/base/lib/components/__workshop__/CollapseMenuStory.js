"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = CollapseMenuStory;

var _react = _interopRequireWildcard(require("react"));

var _ui = require("@sanity/ui");

var _icons = require("@sanity/icons");

var _uiWorkshop = require("@sanity/ui-workshop");

var _ = require("..");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var GAP_OPTIONS = {
  '0': 0,
  '1': 1,
  '2': 2,
  '3': 3
};

function CollapseMenuStory() {
  var _useToast = (0, _ui.useToast)(),
      push = _useToast.push;

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      selected = _useState2[0],
      setSelected = _useState2[1];

  var collapseText = (0, _uiWorkshop.useBoolean)('Collapse text', true);
  var customMenuButton = (0, _uiWorkshop.useBoolean)('Custom menu button', false);
  var gap = (0, _uiWorkshop.useSelect)('Gap', GAP_OPTIONS, 1);
  var collapsed = (0, _uiWorkshop.useBoolean)('Collapsed', false);
  var disableRestoreFocusOnClose = (0, _uiWorkshop.useBoolean)('Disable restore focus on close', false);
  var onMenuClose = (0, _uiWorkshop.useBoolean)('onMenuClose', false);
  var handleSelect = (0, _react.useCallback)(id => {
    setSelected(id);
  }, []);
  var handleMenuClose = (0, _react.useCallback)(() => {
    push({
      title: 'Menu closed',
      status: 'success'
    });
  }, [push]);
  var menuButton = (0, _react.useMemo)(() => customMenuButton ? /*#__PURE__*/_react.default.createElement(_ui.Button, {
    tone: "primary",
    icon: _icons.CogIcon
  }) : undefined, [customMenuButton]);
  return /*#__PURE__*/_react.default.createElement(_ui.Container, {
    padding: 4,
    width: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    shadow: 1,
    padding: 1,
    radius: 3
  }, /*#__PURE__*/_react.default.createElement(_.CollapseMenu, {
    collapsed: collapsed,
    gap: gap,
    menuButton: menuButton,
    onMenuClose: onMenuClose ? handleMenuClose : undefined,
    disableRestoreFocusOnClose: disableRestoreFocusOnClose
  }, /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    icon: _icons.BoldIcon,
    onClick: () => handleSelect('bold'),
    selected: selected === 'bold',
    text: "Bold"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    icon: _icons.ItalicIcon,
    onClick: () => handleSelect('italic'),
    selected: selected === 'italic',
    text: "Italic"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    icon: _icons.CodeIcon,
    onClick: () => handleSelect('code'),
    selected: selected === 'code',
    text: "Code"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    icon: _icons.UnderlineIcon,
    onClick: () => handleSelect('underline'),
    selected: selected === 'underline',
    text: "Underline"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    dividerBefore: true,
    icon: _icons.UlistIcon,
    onClick: () => handleSelect('ulist'),
    selected: selected === 'ulist',
    text: "Ulist"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    icon: _icons.OlistIcon,
    onClick: () => handleSelect('olist'),
    selected: selected === 'olist',
    text: "Olist"
  }), /*#__PURE__*/_react.default.createElement(_.CollapseMenuButton, {
    buttonProps: {
      mode: 'bleed'
    },
    collapseText: collapseText,
    dividerBefore: true,
    icon: _icons.ImageIcon,
    onClick: () => handleSelect('image'),
    selected: selected === 'image',
    text: "Image"
  }))));
}