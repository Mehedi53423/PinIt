"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaPreview = void 0;

var _react = _interopRequireDefault(require("react"));

var _ui = require("@sanity/ui");

var _useDevicePixelRatio = require("use-device-pixel-ratio");

var _progress = require("../progress");

var _mediaPreview = require("./mediaPreview.styled");

var _excluded = ["title", "media", "mediaDimensions", "children", "isPlaceholder", "progress", "withRadius", "withBorder"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DEFAULT_MEDIA_DIMENSIONS = {
  width: 160,
  height: 160,
  aspect: 1,
  fit: 'crop',
  dpr: (0, _useDevicePixelRatio.getDevicePixelRatio)()
};

var MediaPreview = props => {
  var title = props.title,
      media = props.media,
      _props$mediaDimension = props.mediaDimensions,
      mediaDimensions = _props$mediaDimension === void 0 ? DEFAULT_MEDIA_DIMENSIONS : _props$mediaDimension,
      children = props.children,
      isPlaceholder = props.isPlaceholder,
      progress = props.progress,
      _props$withRadius = props.withRadius,
      withRadius = _props$withRadius === void 0 ? true : _props$withRadius,
      _props$withBorder = props.withBorder,
      withBorder = _props$withBorder === void 0 ? true : _props$withBorder,
      rest = _objectWithoutProperties(props, _excluded);

  var aspect = (mediaDimensions === null || mediaDimensions === void 0 ? void 0 : mediaDimensions.aspect) || DEFAULT_MEDIA_DIMENSIONS.aspect;
  var STYLES_PADDER = {
    paddingTop: "".concat(100 / aspect, "%")
  };

  if (isPlaceholder) {
    return /*#__PURE__*/_react.default.createElement(_mediaPreview.Root, {
      overflow: "hidden",
      flex: 1
    }, /*#__PURE__*/_react.default.createElement("div", {
      style: STYLES_PADDER
    }));
  }

  return /*#__PURE__*/_react.default.createElement(_mediaPreview.Root, _extends({
    overflow: "hidden",
    flex: 1,
    title: typeof title === 'string' ? title : undefined
  }, rest), /*#__PURE__*/_react.default.createElement("div", {
    style: STYLES_PADDER
  }), /*#__PURE__*/_react.default.createElement(_mediaPreview.MediaWrapper, {
    align: "center",
    justify: "center",
    $withBorder: withBorder,
    $withRadius: withRadius
  }, typeof media === 'undefined' && /*#__PURE__*/_react.default.createElement(_ui.Box, null, title), typeof media === 'function' && media({
    dimensions: mediaDimensions,
    layout: 'media'
  }), typeof media === 'string' && /*#__PURE__*/_react.default.createElement(_mediaPreview.MediaString, {
    padding: 1
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    textOverflow: "ellipsis"
  }, media)), /*#__PURE__*/_react.default.isValidElement(media) && media, typeof progress === 'number' && progress > -1 && /*#__PURE__*/_react.default.createElement(_mediaPreview.ProgressWrapper, {
    align: "center",
    justify: "center"
  }, /*#__PURE__*/_react.default.createElement(_progress.ProgressCircle, {
    percent: progress,
    showPercent: true,
    text: "Uploaded"
  }))), children);
};

exports.MediaPreview = MediaPreview;