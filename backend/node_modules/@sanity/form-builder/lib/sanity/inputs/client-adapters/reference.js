"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getReferenceInfo = getReferenceInfo;
exports.search = search;

var _operators = require("rxjs/operators");

var _rxjs = require("rxjs");

var _internal = require("@sanity/base/_internal");

var _versionedClient = require("../../versionedClient");

var _isNonNullable = require("../../../utils/isNonNullable");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var READABLE = {
  available: true,
  reason: _internal.AvailabilityReason.READABLE
};
var PERMISSION_DENIED = {
  available: false,
  reason: _internal.AvailabilityReason.PERMISSION_DENIED
};
var NOT_FOUND = {
  available: false,
  reason: _internal.AvailabilityReason.NOT_FOUND
};
/**
 * Takes an id and a reference schema type, returns metadata about it
 * @param id
 * @param referenceType
 */

function getReferenceInfo(id, referenceType) {
  var _getIdPair = (0, _internal.getIdPair)(id),
      publishedId = _getIdPair.publishedId,
      draftId = _getIdPair.draftId;

  return (0, _internal.unstable_observeDocumentPairAvailability)(id).pipe((0, _operators.switchMap)(_ref => {
    var draftAvailability = _ref.draft,
        publishedAvailability = _ref.published;

    if (!draftAvailability.available && !publishedAvailability.available) {
      // combine availability of draft + published
      var availability = draftAvailability.reason === 'PERMISSION_DENIED' || publishedAvailability.reason === 'PERMISSION_DENIED' ? PERMISSION_DENIED : NOT_FOUND; // short circuit, neither draft nor published is available so no point in trying to get preview

      return (0, _rxjs.of)({
        id,
        type: undefined,
        availability,
        preview: {
          draft: undefined,
          published: undefined
        }
      });
    }

    return (0, _rxjs.combineLatest)([(0, _internal.observeDocumentTypeFromId)(draftId), (0, _internal.observeDocumentTypeFromId)(publishedId)]).pipe((0, _operators.switchMap)(_ref2 => {
      var _ref3 = _slicedToArray(_ref2, 2),
          draftTypeName = _ref3[0],
          publishedTypeName = _ref3[1];

      // assume draft + published are always same type
      var typeName = draftTypeName || publishedTypeName;

      if (!typeName) {
        // we have already asserted that either the draft or the published document is readable, so
        // if we get here we can't read the _type, so we're likely to be in an inconsistent state
        // waiting for an update to reach the client. Since we're in the context of a reactive stream based on
        // the _type we'll get it eventually
        return _rxjs.EMPTY;
      } // get schema type for the referenced document


      var refSchemaType = referenceType.to.find(memberType => memberType.name === typeName);
      var previewPaths = [...((0, _internal.getPreviewPaths)(refSchemaType) || []), ['_updatedAt'], ['_createdAt']];
      var draftPreview$ = (0, _internal.observePaths)(draftId, previewPaths).pipe((0, _operators.map)(result => result ? (0, _internal.prepareForPreview)(result, refSchemaType) : result));
      var publishedPreview$ = (0, _internal.observePaths)(publishedId, previewPaths).pipe((0, _operators.map)(result => result ? (0, _internal.prepareForPreview)(result, refSchemaType) : result));
      return (0, _rxjs.combineLatest)([draftPreview$, publishedPreview$]).pipe((0, _operators.map)(_ref4 => {
        var _ref5 = _slicedToArray(_ref4, 2),
            draftPreview = _ref5[0],
            publishedPreview = _ref5[1];

        var availability = // eslint-disable-next-line no-nested-ternary
        draftAvailability.available || publishedAvailability.available ? READABLE : draftAvailability.reason === 'PERMISSION_DENIED' || publishedAvailability.reason === 'PERMISSION_DENIED' ? PERMISSION_DENIED : NOT_FOUND;
        return {
          type: typeName,
          id: publishedId,
          availability,
          preview: {
            draft: draftPreview,
            published: publishedPreview
          }
        };
      }));
    }));
  }));
}

/**
 * when we get a search result it may not include all [draft, published] id pairs for documents matching the
 * query. For example: the search may yield a hit in the draft, but not the published and vice versa
 * This method takes a list of collated search hits, returns the ids that's missing
 * @param collated
 */
function getMissingIds(collated) {
  return collated.filter(c => !c.draft || !c.published).flatMap(c => {
    var draftId = (0, _internal.getDraftId)(c.id);
    return [c.draft ? null : draftId, c.published ? null : c.id];
  }).filter(_isNonNullable.isNonNullable);
}

function search(textTerm, type, options) {
  var searchWeighted = (0, _internal.createWeightedSearch)(type.to, _versionedClient.searchClient, options);
  return searchWeighted(textTerm, {
    includeDrafts: true,
    limit: 50
  }).pipe((0, _operators.map)(results => results.map(result => result.hit)), (0, _operators.map)(_internal.collate), (0, _operators.map)(collated => collated.slice(0, 50)), (0, _operators.mergeMap)(collated => {
    var ids = getMissingIds(collated); // note: this is a lot faster than doing the query *[_id in $ids] {_id}

    var q = "{".concat(ids.map(id => "\"".concat(id, "\": defined(*[_id == \"").concat(id, "\"][0]._id)")).join(','), "}");
    return _versionedClient.searchClient.observable.fetch(q, {}, {
      tag: 'debug'
    }).pipe((0, _operators.map)(result => collated.map(entry => {
      var draftId = (0, _internal.getDraftId)(entry.id);
      return {
        id: entry.id,
        type: entry.type,
        draft: entry.draft || result[draftId] ? {
          _id: draftId,
          _type: entry.type
        } : undefined,
        published: entry.published || result[entry.id] ? {
          _id: entry.id,
          _type: entry.type
        } : undefined
      };
    })));
  }));
}