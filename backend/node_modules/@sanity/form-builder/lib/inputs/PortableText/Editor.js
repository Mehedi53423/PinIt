"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editor = Editor;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _scrollSelectionIntoView = require("./utils/scrollSelectionIntoView");

var _toolbar = require("./toolbar");

var _text = require("./text");

var _Editor = require("./Editor.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var renderDecorator = (mark, mType, attributes, defaultRender) => {
  return /*#__PURE__*/_react.default.createElement(_text.Decorator, {
    mark: mark
  }, defaultRender());
};

function Editor(props) {
  var hotkeysProp = props.hotkeys,
      initialSelection = props.initialSelection,
      isFullscreen = props.isFullscreen,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onPaste = props.onPaste,
      onToggleFullscreen = props.onToggleFullscreen,
      readOnly = props.readOnly,
      renderAnnotation = props.renderAnnotation,
      renderBlock = props.renderBlock,
      renderChild = props.renderChild,
      scrollElement = props.scrollElement,
      setPortalElement = props.setPortalElement,
      setScrollElement = props.setScrollElement,
      value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var ptFeatures = (0, _react.useMemo)(() => _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor), [editor]);

  var _useLayer = (0, _ui.useLayer)(),
      isTopLayer = _useLayer.isTopLayer;

  var _useBoundaryElement = (0, _ui.useBoundaryElement)(),
      boundaryElement = _useBoundaryElement.element; // TODO: Enable when we agree upon the hotkey for opening edit object interface when block object is focused
  //
  // const handleOpenObjectHotkey = (
  //   event: React.BaseSyntheticEvent,
  //   ptEditor: PortableTextEditor
  // ) => {
  //   const selection = PortableTextEditor.getSelection(ptEditor)
  //   if (selection) {
  //     event.preventDefault()
  //     event.stopPropagation()
  //     const {focus} = selection
  //     const activeAnnotations = PortableTextEditor.activeAnnotations(ptEditor)
  //     const focusBlock = PortableTextEditor.focusBlock(ptEditor)
  //     const focusChild = PortableTextEditor.focusChild(ptEditor)
  //     if (activeAnnotations.length > 0) {
  //       onFocus([
  //         ...focus.path.slice(0, 1),
  //         'markDefs',
  //         {_key: activeAnnotations[0]._key},
  //         FOCUS_TERMINATOR,
  //       ])
  //       return
  //     }
  //     if (focusChild && PortableTextEditor.isVoid(ptEditor, focusChild)) {
  //       onFocus([...focus.path, FOCUS_TERMINATOR])
  //       return
  //     }
  //     if (focusBlock && PortableTextEditor.isVoid(ptEditor, focusBlock)) {
  //       onFocus([...focus.path.slice(0, 1), FOCUS_TERMINATOR])
  //     }
  //   }
  // }


  var customFromProps = (0, _react.useMemo)(() => ({
    custom: _objectSpread({
      'mod+enter': onToggleFullscreen
    }, (hotkeysProp || {}).custom)
  }), [hotkeysProp, onToggleFullscreen]);
  var defaultHotkeys = (0, _react.useMemo)(() => {
    var def = {
      marks: {}
    };
    ptFeatures.decorators.forEach(dec => {
      switch (dec.value) {
        case 'strong':
          def.marks['mod+b'] = dec.value;
          break;

        case 'em':
          def.marks['mod+i'] = dec.value;
          break;

        case 'underline':
          def.marks['mod+u'] = dec.value;
          break;

        case 'code':
          def.marks["mod+'"] = dec.value;
          break;

        default: // Nothing

      }
    });
    return def;
  }, [ptFeatures.decorators]);
  var marksFromProps = (0, _react.useMemo)(() => ({
    marks: _objectSpread(_objectSpread({}, defaultHotkeys.marks), (hotkeysProp || {}).marks)
  }), [hotkeysProp, defaultHotkeys]);
  var hotkeys = (0, _react.useMemo)(() => _objectSpread(_objectSpread({}, marksFromProps), customFromProps), [marksFromProps, customFromProps]);
  (0, _react.useEffect)(() => {
    if (!isTopLayer || !isFullscreen) return undefined;

    var handleGlobalKeyDown = event => {
      if (event.key === 'Escape') {
        event.preventDefault();
        event.stopPropagation();
        onToggleFullscreen();
      }
    };

    window.addEventListener('keydown', handleGlobalKeyDown);
    return () => {
      window.removeEventListener('keydown', handleGlobalKeyDown);
    };
  }, [isFullscreen, isTopLayer, onToggleFullscreen]);
  var handleScrollSelectionIntoView = (0, _react.useMemo)(() => (0, _scrollSelectionIntoView.createScrollSelectionIntoView)(scrollElement), [scrollElement]);
  return /*#__PURE__*/_react.default.createElement(_Editor.Root, {
    $fullscreen: isFullscreen,
    "data-testid": "pt-editor"
  }, /*#__PURE__*/_react.default.createElement(_Editor.ToolbarCard, {
    "data-testid": "pt-editor__toolbar-card",
    shadow: 1
  }, /*#__PURE__*/_react.default.createElement(_toolbar.Toolbar, {
    isFullscreen: isFullscreen,
    hotkeys: hotkeys,
    onFocus: onFocus,
    readOnly: readOnly,
    onToggleFullscreen: onToggleFullscreen
  })), /*#__PURE__*/_react.default.createElement(_Editor.EditableCard, {
    flex: 1,
    tone: "transparent"
  }, /*#__PURE__*/_react.default.createElement(_Editor.Scroller, {
    ref: setScrollElement
  }, /*#__PURE__*/_react.default.createElement(_Editor.EditableContainer, {
    padding: isFullscreen ? 2 : 0,
    sizing: "border",
    width: 1
  }, /*#__PURE__*/_react.default.createElement(_Editor.EditableWrapper, {
    shadow: isFullscreen ? 1 : 0,
    $isFullscreen: isFullscreen
  }, /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: isFullscreen ? scrollElement : boundaryElement
  }, /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditable, {
    hotkeys: hotkeys,
    onCopy: onCopy,
    onPaste: onPaste,
    placeholderText: value ? undefined : 'Empty',
    renderAnnotation: renderAnnotation,
    renderBlock: renderBlock,
    renderChild: renderChild,
    renderDecorator: renderDecorator,
    scrollSelectionIntoView: handleScrollSelectionIntoView,
    selection: initialSelection
  }))))), /*#__PURE__*/_react.default.createElement("div", {
    "data-portal": "",
    ref: setPortalElement
  })));
}