"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PortableTextInput = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _components = require("@sanity/base/components");

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _rxjs = require("rxjs");

var _ui = require("@sanity/ui");

var _PatchEvent = _interopRequireDefault(require("../../PatchEvent"));

var _withPatchSubscriber = _interopRequireDefault(require("../../utils/withPatchSubscriber"));

var _Input = require("./Input");

var _InvalidValue = require("./InvalidValue");

var _VisibleOnFocusButton = require("./VisibleOnFocusButton");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PortableTextInputWithRef = /*#__PURE__*/_react.default.forwardRef(function PortableTextInput(props, ref) {
  var focusPath = props.focusPath,
      hotkeys = props.hotkeys,
      markers = props.markers,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onPaste = props.onPaste,
      presence = props.presence,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      type = props.type,
      value = props.value,
      subscribe = props.subscribe;

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      hasFocus = _useState2[0],
      setHasFocus = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      ignoreValidationError = _useState4[0],
      setIgnoreValidationError = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      invalidValue = _useState6[0],
      setInvalidValue = _useState6[1];

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isFullscreen = _useState8[0],
      setIsFullscreen = _useState8[1];

  var toast = (0, _ui.useToast)();
  var editorId = (0, _react.useMemo)(() => (0, _uniqueId2.default)('PortableTextInputRoot'), []); // Memoized patch stream

  var patches$ = (0, _react.useMemo)(() => new _rxjs.Subject(), []);
  var patchObservable = (0, _react.useMemo)(() => patches$.asObservable(), [patches$]);
  var handleToggleFullscreen = (0, _react.useCallback)(() => setIsFullscreen(!isFullscreen), [isFullscreen]); // Reset invalidValue if new value is coming in from props

  (0, _react.useEffect)(() => {
    if (invalidValue && value !== invalidValue.value) {
      setInvalidValue(null);
    }
  }, [invalidValue, value]); // Handle incoming patches from withPatchSubscriber HOC

  var handleDocumentPatches = (0, _react.useCallback)(_ref => {
    var patches = _ref.patches;
    var patchSelection = patches && patches.length > 0 && patches.filter(patch => patch.origin !== 'local');

    if (patchSelection) {
      patchSelection.map(patch => patches$.next(patch));
    }
  }, [patches$]); // Subscribe to incoming patches

  (0, _react.useEffect)(() => {
    var unsubscribe = subscribe(handleDocumentPatches);
    return () => unsubscribe();
  }, [handleDocumentPatches, subscribe]); // Handle editor changes

  var handleEditorChange = (0, _react.useCallback)(change => {
    switch (change.type) {
      case 'mutation':
        // Don't wait for the result
        setTimeout(() => {
          onChange(_PatchEvent.default.from(change.patches));
        });
        break;

      case 'selection':
        if (change.selection && change.selection.focus.path && !(0, _isEqual2.default)(focusPath, change.selection.focus.path) // Only if different than before
        ) {
          setTimeout(() => {
            onFocus(change.selection.focus.path);
          }, 0); // Do this in the next tick or we might end up tracking it
        }

        break;

      case 'focus':
        setHasFocus(true);
        break;

      case 'blur':
        setHasFocus(false);
        onBlur();
        break;

      case 'undo':
      case 'redo':
        onChange(_PatchEvent.default.from(change.patches));
        break;

      case 'invalidValue':
        setInvalidValue(change);
        break;

      case 'error':
        toast.push({
          status: change.level,
          description: change.description
        });
        break;

      default:
    }
  }, [focusPath, onBlur, onChange, onFocus, toast]);
  var handleFocusSkipperClick = (0, _react.useCallback)(() => {
    if (ref.current) {
      _portableTextEditor.PortableTextEditor.focus(ref.current);
    }
  }, [ref]);
  var editorInput = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditor, {
    ref: ref,
    incomingPatches$: patchObservable,
    key: "portable-text-editor-".concat(editorId),
    onChange: handleEditorChange,
    maxBlocks: undefined // TODO: from schema?
    ,
    readOnly: readOnly,
    type: type,
    value: value
  }, !readOnly && /*#__PURE__*/_react.default.createElement(_VisibleOnFocusButton.VisibleOnFocusButton, {
    onClick: handleFocusSkipperClick
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Go to content")), /*#__PURE__*/_react.default.createElement(_Input.Input, {
    editorId: editorId,
    focusPath: focusPath,
    hasFocus: hasFocus,
    hotkeys: hotkeys,
    isFullscreen: isFullscreen,
    markers: markers,
    onChange: onChange,
    onCopy: onCopy,
    onFocus: onFocus,
    onPaste: onPaste,
    onToggleFullscreen: handleToggleFullscreen,
    patches$: patches$,
    presence: presence,
    readOnly: readOnly,
    renderBlockActions: renderBlockActions,
    renderCustomMarkers: renderCustomMarkers,
    value: value
  })), [editorId, focusPath, handleEditorChange, handleFocusSkipperClick, handleToggleFullscreen, hasFocus, hotkeys, isFullscreen, markers, onChange, onCopy, onFocus, onPaste, patches$, patchObservable, presence, readOnly, ref, renderBlockActions, renderCustomMarkers, type, value]);
  var handleIgnoreValidation = (0, _react.useCallback)(() => {
    setIgnoreValidationError(true);
  }, []);
  var respondToInvalidContent = (0, _react.useMemo)(() => {
    if (invalidValue) {
      return /*#__PURE__*/_react.default.createElement(_ui.Box, {
        marginBottom: 2
      }, /*#__PURE__*/_react.default.createElement(_InvalidValue.InvalidValue, {
        onChange: handleEditorChange,
        onIgnore: handleIgnoreValidation,
        resolution: invalidValue.resolution
      }));
    }

    return null;
  }, [handleEditorChange, handleIgnoreValidation, invalidValue]);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !ignoreValidationError && respondToInvalidContent, (!invalidValue || ignoreValidationError) && editorInput);
}); // An outer React Component with blur and focus class methods for the form-builder to call


var PortableTextInput = (0, _withPatchSubscriber.default)(class PortableTextInputWithFocusAndBlur extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "editorRef", /*#__PURE__*/_react.default.createRef());
  }

  focus() {
    if (this.editorRef.current) {
      _portableTextEditor.PortableTextEditor.focus(this.editorRef.current);
    }
  }

  blur() {
    if (this.editorRef.current) {
      _portableTextEditor.PortableTextEditor.blur(this.editorRef.current);
    }
  }

  render() {
    var _this$props = this.props,
        type = _this$props.type,
        level = _this$props.level,
        markers = _this$props.markers,
        presence = _this$props.presence;
    return /*#__PURE__*/_react.default.createElement(_components.FormField, {
      __unstable_changeIndicator: false,
      __unstable_markers: markers,
      __unstable_presence: presence,
      description: type.description,
      level: level,
      title: type.title
    }, /*#__PURE__*/_react.default.createElement(PortableTextInputWithRef, _extends({}, this.props, {
      // NOTE: this should be a temporary fix
      key: this.props.readOnly ? '$readOnly' : '$editable',
      ref: this.editorRef
    })));
  }

});
exports.PortableTextInput = PortableTextInput;