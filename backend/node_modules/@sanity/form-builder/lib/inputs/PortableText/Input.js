"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Input = Input;

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _components = require("@sanity/base/components");

var _ActivateOnFocus = _interopRequireDefault(require("../../components/ActivateOnFocus/ActivateOnFocus"));

var _BlockObject = require("./object/BlockObject");

var _InlineObject = require("./object/InlineObject");

var _EditObject = require("./object/EditObject");

var _text = require("./text");

var _Editor = require("./Editor");

var _Input = require("./Input.styles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var ROOT_PATH = [];

var activateOnFocusMessage = /*#__PURE__*/_react.default.createElement(_ui.Text, {
  weight: "semibold"
}, "Click to activate");

function Input(props) {
  var editorId = props.editorId,
      focusPath = props.focusPath,
      hasFocus = props.hasFocus,
      hotkeys = props.hotkeys,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onPaste = props.onPaste,
      onToggleFullscreen = props.onToggleFullscreen,
      presence = props.presence,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      value = props.value;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      wrapperElement = _useState2[0],
      setWrapperElement = _useState2[1];

  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var selection = (0, _portableTextEditor.usePortableTextEditorSelection)();
  var ptFeatures = (0, _react.useMemo)(() => _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor), [editor]);
  var portal = (0, _ui.usePortal)();

  var _useBoundaryElement = (0, _ui.useBoundaryElement)(),
      boundaryElement = _useBoundaryElement.element; // States


  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isActive = _useState4[0],
      setIsActive = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      objectEditData = _useState6[0],
      setObjectEditData = _useState6[1];

  var _useState7 = (0, _react.useState)(undefined),
      _useState8 = _slicedToArray(_useState7, 2),
      initialSelection = _useState8[0],
      setInitialSelection = _useState8[1];

  var _useState9 = (0, _react.useState)(null),
      _useState10 = _slicedToArray(_useState9, 2),
      scrollElement = _useState10[0],
      setScrollElement = _useState10[1];

  var handledFocusPath = (0, _react.useRef)(null);
  var textBlockSpellCheck = (0, _react.useMemo)(() => {
    var _editor$portableTextF;

    // Chrome 96. has serious perf. issues with spellchecking
    // https://bugs.chromium.org/p/chromium/issues/detail?id=1271918
    // TODO: check up on the status of this.
    var spellCheckOption = (_editor$portableTextF = editor.portableTextFeatures.types.block.options) === null || _editor$portableTextF === void 0 ? void 0 : _editor$portableTextF.spellCheck;
    var isChrome96 = typeof navigator === 'undefined' ? false : /Chrome\/96/.test(navigator.userAgent);
    return spellCheckOption === undefined && isChrome96 === true ? false : spellCheckOption;
  }, [editor]); // Respond to focusPath changes

  (0, _react.useEffect)(() => {
    // Wait until the editor is properly initialized
    if (!editor.editable) {
      return;
    } // Make sure to only handle the same focusPath once


    if (handledFocusPath.current === focusPath) {
      return;
    }

    handledFocusPath.current = focusPath;

    if (focusPath && objectEditData === null) {
      // Test if this focus path is the same as we got selected already.
      // If it is, just return or the editor will just try to refocus which
      // interferes with tab-navigation etc.
      var sameSelection = selection && (0, _isEqual2.default)(selection.focus.path, focusPath) && (0, _isEqual2.default)(selection.focus.path, selection.anchor.path);

      if (sameSelection) {
        return;
      }

      var blockSegment = (0, _types.isKeySegment)(focusPath[0]) && focusPath[0];
      var isBlockOnly = blockSegment && focusPath.length === 1;
      var isChild = blockSegment && focusPath[1] === 'children' && (0, _types.isKeyedObject)(focusPath[2]);
      var isChildOnly = isChild && focusPath.length === 3;
      var isAnnotation = blockSegment && focusPath[1] === 'markDefs';

      if ((isBlockOnly || isChildOnly) && !hasFocus) {
        var _PortableTextEditor$f = _portableTextEditor.PortableTextEditor.findByPath(editor, focusPath),
            _PortableTextEditor$f2 = _slicedToArray(_PortableTextEditor$f, 1),
            node = _PortableTextEditor$f2[0];

        if (node) {
          var point = {
            path: focusPath,
            offset: 0
          };

          _portableTextEditor.PortableTextEditor.select(editor, {
            focus: point,
            anchor: point
          });
        }
      } else if (isAnnotation) {
        var block = (_portableTextEditor.PortableTextEditor.getValue(editor) || []).find(blk => blk._key === blockSegment._key);
        var markDefSegment = focusPath[2];

        if (block && (0, _types.isKeySegment)(markDefSegment)) {
          var span = block.children.find(child => Array.isArray(child.marks) && child.marks.includes(markDefSegment._key));

          if (span) {
            var spanPath = [blockSegment, 'children', {
              _key: span._key
            }];
            setIsActive(true);
            setObjectEditData({
              editorPath: spanPath,
              formBuilderPath: focusPath.slice(0, 3),
              returnToSelection: selection,
              kind: 'annotation'
            });
          }
        }

        return;
      } // Block focus paths


      if (focusPath && (isChild && focusPath.length > 3 || !isChild && focusPath.length > 1)) {
        var kind = 'blockObject';

        var _path = focusPath.slice(0, 1);

        if (isChild) {
          kind = 'inlineObject';
          _path = _path.concat(focusPath.slice(1, 3));
        }

        var _PortableTextEditor$f3 = _portableTextEditor.PortableTextEditor.findByPath(editor, _path),
            _PortableTextEditor$f4 = _slicedToArray(_PortableTextEditor$f3, 1),
            _node = _PortableTextEditor$f4[0]; // Only if it actually exists


        if (_node) {
          setIsActive(true);

          _portableTextEditor.PortableTextEditor.select(editor, {
            focus: {
              path: _path,
              offset: 0
            },
            anchor: {
              path: _path,
              offset: 0
            }
          }); // Make it go to selection first, then load  the editing interface


          setObjectEditData({
            editorPath: _path,
            formBuilderPath: _path,
            kind,
            returnToSelection: selection
          });
        }
      }
    }
  }, [editor, focusPath, hasFocus, objectEditData, selection]); // Set as active whenever we have focus inside the editor.

  (0, _react.useEffect)(() => {
    if (hasFocus) {
      setIsActive(true);
    }
  }, [hasFocus]);
  var handleToggleFullscreen = (0, _react.useCallback)(() => {
    setInitialSelection(_portableTextEditor.PortableTextEditor.getSelection(editor));
    onToggleFullscreen();

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, onToggleFullscreen]);
  var focus = (0, _react.useCallback)(() => {
    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor]);
  var handleActivate = (0, _react.useCallback)(() => {
    if (!isActive) {
      setIsActive(true);
      focus();
    }
  }, [focus, isActive]);
  var handleFormBuilderEditObjectChange = (0, _react.useCallback)((patchEvent, path) => {
    var _patchEvent = patchEvent;
    path.slice(0).reverse().forEach(segment => {
      _patchEvent = _patchEvent.prefixAll(segment);
    });

    _patchEvent.patches.map(patch => props.patches$.next(patch));

    onChange(_patchEvent);
  }, [onChange, props.patches$]);
  var handleEditObjectFormBuilderFocus = (0, _react.useCallback)(nextPath => {
    if (objectEditData && nextPath) {
      onFocus(nextPath);
    }
  }, [objectEditData, onFocus]);
  var handleEditObjectFormBuilderBlur = (0, _react.useCallback)(() => {// noop
  }, []);
  var spanTypeName = (0, _react.useMemo)(() => ptFeatures.types.span.name, [ptFeatures]);
  var textBlockTypeName = (0, _react.useMemo)(() => ptFeatures.types.block.name, [ptFeatures]);
  var isEmptyValue = value === undefined;
  var renderBlock = (0, _react.useCallback)((block, blockType, attributes, defaultRender) => {
    var isTextBlock = block._type === textBlockTypeName;

    var blockRef = /*#__PURE__*/_react.default.createRef();

    var blockMarkers = markers.filter(marker => (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === block._key);

    if (isTextBlock) {
      return /*#__PURE__*/_react.default.createElement(_text.TextBlock, {
        attributes: attributes,
        block: block,
        blockRef: blockRef,
        isFullscreen: isFullscreen,
        markers: blockMarkers,
        onChange: onChange,
        readOnly: readOnly,
        spellCheck: textBlockSpellCheck,
        renderBlockActions: isEmptyValue ? undefined : renderBlockActions,
        renderCustomMarkers: isEmptyValue ? undefined : renderCustomMarkers
      }, defaultRender(block));
    }

    return /*#__PURE__*/_react.default.createElement(_BlockObject.BlockObject, {
      attributes: attributes,
      block: block,
      blockRef: blockRef,
      editor: editor,
      isFullscreen: isFullscreen,
      markers: blockMarkers,
      onChange: onChange,
      onFocus: onFocus,
      readOnly: readOnly,
      renderBlockActions: isEmptyValue ? undefined : renderBlockActions,
      renderCustomMarkers: isEmptyValue ? undefined : renderCustomMarkers,
      type: blockType
    });
  }, [editor, isEmptyValue, isFullscreen, markers, onChange, onFocus, readOnly, renderBlockActions, renderCustomMarkers, textBlockTypeName, textBlockSpellCheck]);
  var renderChild = (0, _react.useCallback)((child, childType, attributes, defaultRender) => {
    var isSpan = child._type === spanTypeName;

    if (isSpan) {
      return defaultRender(child);
    }

    var childMarkers = markers.filter(marker => (0, _types.isKeySegment)(marker.path[2]) && marker.path[2]._key === child._key);
    return /*#__PURE__*/_react.default.createElement(_InlineObject.InlineObject, {
      attributes: attributes,
      markers: childMarkers,
      onFocus: onFocus,
      readOnly: readOnly,
      renderCustomMarkers: renderCustomMarkers,
      type: childType,
      value: child
    });
  }, [spanTypeName, markers, onFocus, readOnly, renderCustomMarkers]);
  var renderAnnotation = (0, _react.useCallback)((annotation, annotationType, attributes, defaultRender) => {
    var annotationMarkers = markers.filter(marker => (0, _types.isKeySegment)(marker.path[2]) && marker.path[2]._key === annotation._key);
    var hasError = annotationMarkers.filter(marker => marker.type === 'validation' && marker.level === 'error').length > 0;
    var hasWarning = annotationMarkers.filter(marker => marker.type === 'validation' && marker.level === 'warning').length > 0;
    return /*#__PURE__*/_react.default.createElement(_text.Annotation, {
      attributes: attributes,
      hasError: hasError,
      hasWarning: hasWarning,
      onFocus: onFocus,
      markers: annotationMarkers,
      renderCustomMarkers: renderCustomMarkers,
      value: annotation,
      type: annotationType,
      scrollElement: scrollElement
    }, defaultRender());
  }, [markers, onFocus, renderCustomMarkers, scrollElement]);
  var handleEditObjectClose = (0, _react.useCallback)(() => {
    var sel = (objectEditData === null || objectEditData === void 0 ? void 0 : objectEditData.returnToSelection) || selection;
    setObjectEditData(null);

    if (sel) {
      onFocus(sel.focus.path);

      _portableTextEditor.PortableTextEditor.select(editor, sel);
    } else {
      _portableTextEditor.PortableTextEditor.focus(editor);
    }
  }, [editor, objectEditData === null || objectEditData === void 0 ? void 0 : objectEditData.returnToSelection, onFocus, selection]);

  var _useState11 = (0, _react.useState)(null),
      _useState12 = _slicedToArray(_useState11, 2),
      portalElement = _useState12[0],
      setPortalElement = _useState12[1];

  var editorNode = /*#__PURE__*/_react.default.createElement(_Editor.Editor, {
    hotkeys: hotkeys,
    initialSelection: initialSelection,
    isFullscreen: isFullscreen,
    key: "editor-".concat(editorId),
    onFocus: onFocus,
    onCopy: onCopy,
    onPaste: onPaste,
    onToggleFullscreen: handleToggleFullscreen,
    readOnly: isActive === false || readOnly,
    renderAnnotation: renderAnnotation,
    renderBlock: renderBlock,
    renderChild: renderChild,
    setPortalElement: setPortalElement,
    value: value,
    scrollElement: scrollElement,
    setScrollElement: setScrollElement
  });

  var editObjectNode = /*#__PURE__*/_react.default.createElement(_ui.BoundaryElementProvider, {
    element: isFullscreen ? scrollElement : boundaryElement
  }, /*#__PURE__*/_react.default.createElement(_EditObject.EditObject, {
    focusPath: focusPath,
    objectEditData: objectEditData,
    markers: markers // TODO: filter relevant
    ,
    onBlur: handleEditObjectFormBuilderBlur,
    onChange: handleFormBuilderEditObjectChange,
    onClose: handleEditObjectClose,
    onFocus: handleEditObjectFormBuilderFocus,
    readOnly: readOnly,
    presence: presence,
    value: value
  }));

  var children = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, editorNode, editObjectNode);

  var portalElements = (0, _react.useMemo)(() => ({
    collapsed: wrapperElement,
    default: portal.element,
    editor: portalElement,
    expanded: portal.element
  }), [portal.element, portalElement, wrapperElement]);
  return /*#__PURE__*/_react.default.createElement(_ui.PortalProvider, {
    __unstable_elements: portalElements
  }, /*#__PURE__*/_react.default.createElement(_ActivateOnFocus.default, {
    message: activateOnFocusMessage,
    onActivate: handleActivate,
    isOverlayActive: !isActive
  }, /*#__PURE__*/_react.default.createElement(_components.ChangeIndicatorWithProvidedFullPath, {
    compareDeep: true,
    value: value,
    hasFocus: hasFocus && objectEditData === null,
    path: ROOT_PATH
  }, /*#__PURE__*/_react.default.createElement(_Input.Root, {
    "data-focused": hasFocus ? '' : undefined,
    "data-read-only": readOnly ? '' : undefined
  }, /*#__PURE__*/_react.default.createElement("div", {
    "data-wrapper": "",
    ref: setWrapperElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Portal, {
    __unstable_name: isFullscreen ? 'expanded' : 'collapsed'
  }, isFullscreen ? /*#__PURE__*/_react.default.createElement(_Input.ExpandedLayer, null, children) : children)), /*#__PURE__*/_react.default.createElement("div", {
    "data-border": ""
  })))));
}