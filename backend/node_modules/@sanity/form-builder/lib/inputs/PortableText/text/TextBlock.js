"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextBlock = TextBlock;

var _types = require("@sanity/types");

var _ui = require("@sanity/ui");

var _react = _interopRequireWildcard(require("react"));

var _legacyParts = require("../../../legacyParts");

var _BlockActions = require("../BlockActions");

var _constants = require("./constants");

var _TextBlock = require("./TextBlock.styles");

var _textStyles = require("./textStyles");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function TextBlock(props) {
  var attributes = props.attributes,
      block = props.block,
      blockRef = props.blockRef,
      children = props.children,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      spellCheck = props.spellCheck;
  var focused = attributes.focused;
  var blockKey = block._key; // These are marker that is only for the block level (things further up, like annotations and inline objects are dealt with in their respective components)

  var blockMarkers = (0, _react.useMemo)(() => markers.filter(marker => marker.path.length === 1 && (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === blockKey), [blockKey, markers]);
  var errorMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => (0, _types.isValidationMarker)(marker) && marker.level === 'error'), [blockMarkers]);
  var warningMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => (0, _types.isValidationMarker)(marker) && marker.level === 'warning'), [blockMarkers]);
  var hasCustomMarkers = Boolean(renderCustomMarkers) && blockMarkers.filter(m => !(0, _types.isValidationMarker)(m)).length > 0;
  var hasErrors = errorMarkers.length > 0;
  var hasWarnings = warningMarkers.length > 0;
  var tooltipEnabled = hasErrors || hasWarnings || hasCustomMarkers;
  var blockPath = (0, _react.useMemo)(() => [{
    _key: blockKey
  }], [blockKey]);
  var text = (0, _react.useMemo)(() => {
    var TextStyle = _textStyles.TEXT_STYLES[block.style] || _textStyles.TEXT_STYLES.normal;
    return /*#__PURE__*/_react.default.createElement(_TextBlock.TextFlex, {
      align: "flex-start",
      $level: block === null || block === void 0 ? void 0 : block.level
    }, block.listItem && /*#__PURE__*/_react.default.createElement(_TextBlock.ListPrefixWrapper, {
      contentEditable: false
    }, /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-list-prefix": ""
    })), /*#__PURE__*/_react.default.createElement(TextStyle, {
      "data-text": ""
    }, children));
  }, [block.style, block.listItem, block.level, children]);
  var innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]);
  var outerPaddingProps = (0, _react.useMemo)(() => {
    if (block.listItem) {
      return {
        paddingY: 2
      };
    }

    return _constants.TEXT_STYLE_PADDING[block.style] || {
      paddingY: 2
    };
  }, [block]);
  return /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    "data-testid": "text-block"
  }, outerPaddingProps), /*#__PURE__*/_react.default.createElement(_TextBlock.TextBlockFlexWrapper, {
    "data-testid": "text-block__wrapper"
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, _extends({
    flex: 1
  }, innerPaddingProps), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    boundaryElement: blockRef === null || blockRef === void 0 ? void 0 : blockRef.current,
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(_TextBlock.TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: blockMarkers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.TextRoot, {
    $level: block.level,
    "data-error": hasErrors ? '' : undefined,
    "data-warning": hasWarnings ? '' : undefined,
    "data-list-item": block.listItem,
    "data-custom-markers": hasCustomMarkers ? '' : undefined,
    "data-testid": "text-block__text",
    spellCheck: spellCheck,
    ref: blockRef
  }, text))), /*#__PURE__*/_react.default.createElement("div", {
    contentEditable: false // NOTE: itâ€™s important that this element does not have the `user-select: none` CSS
    // property, because that will not work in Safari (breaks `Cmd+A`).
    // It seems Safari does not allow defining `user-select` on an element which also has
    // the `contenteditable="false"` attribute.

  }, renderBlockActions && /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(_TextBlock.BlockActionsInner, null, focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && /*#__PURE__*/_react.default.createElement(_TextBlock.ChangeIndicatorWrapper, null, /*#__PURE__*/_react.default.createElement(_TextBlock.StyledChangeIndicatorWithProvidedFullPath, {
    compareDeep: true,
    value: block,
    hasFocus: focused,
    path: blockPath
  })))));
}