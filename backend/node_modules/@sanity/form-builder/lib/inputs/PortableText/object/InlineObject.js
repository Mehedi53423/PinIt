"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineObject = void 0;

var _react = _interopRequireWildcard(require("react"));

var _color = require("@sanity/color");

var _paths = require("@sanity/util/paths");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _ui = require("@sanity/ui");

var _Preview = _interopRequireDefault(require("../../../Preview"));

var _legacyParts = require("../../../legacyParts");

var _templateObject, _templateObject2, _templateObject3;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function rootStyle(_ref) {
  var theme = _ref.theme;
  var _theme$sanity = theme.sanity,
      color = _theme$sanity.color,
      radius = _theme$sanity.radius;
  return (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    line-height: 0;\n    border-radius: ", "px;\n    padding: 2px;\n    box-shadow: inset 0 0 0 1px var(--card-border-color);\n    height: calc(1em - 1px);\n    margin-top: 0.0625em;\n\n    &:not([hidden]) {\n      display: inline-flex;\n      align-items: center;\n      vertical-align: top;\n    }\n\n    &[data-ready-only] {\n      cursor: default;\n    }\n\n    &[data-focused] {\n      box-shadow: inset 0 0 0 1px ", ";\n      color: ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      --card-bg-color: ", ";\n    }\n\n    &[data-warning] {\n      --card-bg-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      --card-bg-color: ", ";\n      --card-border-color: ", ";\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[2], color.selectable.primary.selected.border, color.selectable.primary.pressed.fg, color.input.default.hovered.border, color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, color.input.invalid.enabled.bg, color.input.invalid.enabled.border, color.input.invalid.hovered.border);
}

var Root = (0, _styledComponents.default)(_ui.Card)(rootStyle);

var PreviewSpan = _styledComponents.default.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  max-width: calc(5em + 80px);\n  position: relative;\n\n  & > * {\n    user-select: none;\n    pointer-events: none;\n  }\n"])));

var TooltipBox = (0, _styledComponents.default)(_ui.Box)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));

var InlineObject = _ref2 => {
  var _ref2$attributes = _ref2.attributes,
      focused = _ref2$attributes.focused,
      selected = _ref2$attributes.selected,
      path = _ref2$attributes.path,
      markers = _ref2.markers,
      onFocus = _ref2.onFocus,
      readOnly = _ref2.readOnly,
      renderCustomMarkers = _ref2.renderCustomMarkers,
      type = _ref2.type,
      value = _ref2.value;
  var handleOpen = (0, _react.useCallback)(() => {
    if (focused) {
      onFocus(path.concat(_paths.FOCUS_TERMINATOR));
    }
  }, [focused, onFocus, path]);
  var hasError = (0, _react.useMemo)(() => markers.filter(marker => marker.type === 'validation' && marker.level === 'error').length > 0, [markers]);
  var hasWarning = (0, _react.useMemo)(() => markers.filter(marker => marker.type === 'validation' && marker.level === 'warning').length > 0, [markers]);
  var hasMarkers = markers.length > 0;
  var tone = (0, _react.useMemo)(() => {
    if (hasError) {
      return 'critical';
    }

    if (hasWarning) {
      return 'caution';
    }

    if (selected || focused) {
      return 'primary';
    }

    return undefined;
  }, [focused, hasError, hasWarning, selected]);
  var preview = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(PreviewSpan, null, /*#__PURE__*/_react.default.createElement(_Preview.default, {
    type: type,
    value: value,
    fallbackTitle: "Click to edit",
    layout: "inline"
  })), [type, value]);
  var markersToolTip = (0, _react.useMemo)(() => markers.length > 0 ? /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    content: /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, preview) : undefined, [markers, preview, renderCustomMarkers]);
  return (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(Root, {
    "data-focused": focused || undefined,
    "data-invalid": hasError || undefined,
    "data-warning": hasWarning || undefined,
    "data-selected": selected || undefined,
    "data-read-only": readOnly || undefined,
    "data-markers": hasMarkers || undefined,
    tone: tone,
    onClick: handleOpen,
    forwardedAs: "span"
  }, /*#__PURE__*/_react.default.createElement("span", null, markersToolTip || preview)), [focused, handleOpen, hasError, hasWarning, hasMarkers, markersToolTip, preview, readOnly, selected, tone]);
};

exports.InlineObject = InlineObject;