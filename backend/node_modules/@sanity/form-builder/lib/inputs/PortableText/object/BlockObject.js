"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObject = BlockObject;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _ui = require("@sanity/ui");

var _color = require("@sanity/color");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _legacyParts = require("../../../legacyParts");

var _BlockActions = require("../BlockActions");

var _BlockObjectPreview = require("./BlockObjectPreview");

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var Root = (0, _styledComponents.default)(_ui.Card)(props => {
  var _props$theme$sanity = props.theme.sanity,
      color = _props$theme$sanity.color,
      radius = _props$theme$sanity.radius,
      space = _props$theme$sanity.space;
  var overlay = (0, _styledComponents.css)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    pointer-events: none;\n    content: '';\n    position: absolute;\n    top: -", "px;\n    bottom: -", "px;\n    left: -", "px;\n    right: -", "px;\n    border-radius: ", "px;\n    mix-blend-mode: ", ";\n  "])), space[1], space[1], space[1], space[1], radius[2], color.dark ? 'screen' : 'multiply');
  return (0, _styledComponents.css)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    box-shadow: 0 0 0 1px var(--card-border-color);\n    border-radius: ", "px;\n    pointer-events: all;\n    position: relative;\n\n    &[data-focused] {\n      box-shadow: 0 0 0 1px ", ";\n    }\n\n    &:not([data-focused]):not([data-selected]) {\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-markers] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n    }\n\n    &[data-warning] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n\n    &[data-invalid] {\n      &:after {\n        ", "\n        background-color: ", ";\n      }\n\n      @media (hover: hover) {\n        &:hover {\n          --card-border-color: ", ";\n        }\n      }\n    }\n  "])), radius[1], color.selectable.primary.selected.border, color.input.default.hovered.border, overlay, color.dark ? _color.hues.purple[950].hex : _color.hues.purple[50].hex, overlay, color.muted.caution.hovered.bg, color.muted.caution.hovered.border, overlay, color.input.invalid.enabled.bg, color.input.invalid.hovered.border);
});

var ChangeIndicatorWrapper = _styledComponents.default.div(_ref => {
  var theme = _ref.theme;
  var space = theme.sanity.space;
  return (0, _styledComponents.css)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    position: absolute;\n    width: ", "px;\n    right: 0;\n    top: -", "px;\n    bottom: -", "px;\n    padding-left: ", "px;\n\n    [data-dragged] & {\n      visibility: hidden;\n    }\n  "])), space[2], space[1], space[1], space[1]);
});

var StyledChangeIndicatorWithProvidedFullPath = (0, _styledComponents.default)(_changeIndicators.ChangeIndicatorWithProvidedFullPath)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: 1px;\n  height: 100%;\n\n  & > div {\n    height: 100%;\n  }\n"])));
var InnerFlex = (0, _styledComponents.default)(_ui.Flex)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: relative;\n\n  [data-dragged] > & {\n    opacity: 0.5;\n  }\n"])));
var BlockActionsOuter = (0, _styledComponents.default)(_ui.Box)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  width: 25px;\n  position: relative;\n\n  [data-dragged] & {\n    visibility: hidden;\n  }\n"])));
var BlockActionsInner = (0, _styledComponents.default)(_ui.Flex)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 0;\n"])));
var TooltipBox = (0, _styledComponents.default)(_ui.Box)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  max-width: 250px;\n"])));
var BlockPreview = (0, _styledComponents.default)(_ui.Box)(props => {
  var color = props.theme.sanity.color.input;
  return (0, _styledComponents.css)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color.default.enabled.bg);
});

function BlockObject(props) {
  var _type$type;

  var _props$attributes = props.attributes,
      focused = _props$attributes.focused,
      selected = _props$attributes.selected,
      path = _props$attributes.path,
      block = props.block,
      blockRef = props.blockRef,
      editor = props.editor,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onChange = props.onChange,
      onFocus = props.onFocus,
      readOnly = props.readOnly,
      renderBlockActions = props.renderBlockActions,
      renderCustomMarkers = props.renderCustomMarkers,
      type = props.type;
  var elementRef = (0, _react.useRef)();
  var handleEdit = (0, _react.useCallback)(() => {
    onFocus(path.concat(_paths.FOCUS_TERMINATOR));
  }, [onFocus, path]);
  var handleClickToOpen = (0, _react.useCallback)(() => {
    handleEdit();
  }, [handleEdit]);
  var handleDelete = (0, _react.useCallback)(() => {
    _portableTextEditor.PortableTextEditor.delete(editor, {
      focus: {
        path,
        offset: 0
      },
      anchor: {
        path,
        offset: 0
      }
    }, {
      mode: 'block'
    });

    _portableTextEditor.PortableTextEditor.focus(editor);
  }, [editor, path]);
  var blockPreview = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_BlockObjectPreview.BlockObjectPreview, {
      type: type,
      value: block,
      readOnly: readOnly,
      onClickingDelete: handleDelete,
      onClickingEdit: handleEdit
    });
  }, [type, block, readOnly, handleDelete, handleEdit]);
  var tone = selected || focused ? 'primary' : 'default';
  var innerPaddingProps = (0, _react.useMemo)(() => {
    if (isFullscreen && !renderBlockActions) {
      return {
        paddingX: 5,
        paddingBottom: 1
      };
    }

    if (isFullscreen && renderBlockActions) {
      return {
        paddingLeft: 5,
        paddingRight: 2,
        paddingBottom: 1
      };
    }

    if (renderBlockActions) {
      return {
        paddingLeft: 3,
        paddingRight: 2,
        paddingBottom: 1
      };
    }

    return {
      paddingX: 3
    };
  }, [isFullscreen, renderBlockActions]); // These are marker that is only for the block level (things further up, like annotations and inline objects are dealt with in their respective components)

  var blockMarkers = (0, _react.useMemo)(() => markers.filter(marker => (0, _types.isKeySegment)(marker.path[0]) && marker.path[0]._key === block._key), [block._key, markers]);
  var errorMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'error'), [blockMarkers]);
  var warningMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'warning'), [blockMarkers]);
  var infoMarkers = (0, _react.useMemo)(() => blockMarkers.filter(marker => marker.type === 'validation' && marker.level === 'info'), [blockMarkers]);
  var hasMarkers = Boolean(blockMarkers.length > 0 && renderCustomMarkers);
  var hasErrors = errorMarkers.length > 0;
  var hasWarnings = warningMarkers.length > 0;
  var hasInfo = infoMarkers.length > 0;
  var isImagePreview = (type === null || type === void 0 ? void 0 : (_type$type = type.type) === null || _type$type === void 0 ? void 0 : _type$type.name) === 'image';
  var blockPath = (0, _react.useMemo)(() => [{
    _key: block._key
  }], [block._key]);
  var tooltipEnabled = hasErrors || hasWarnings || hasInfo || hasMarkers;
  return /*#__PURE__*/_react.default.createElement(InnerFlex, {
    marginY: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, _extends({
    flex: 1
  }, innerPaddingProps), /*#__PURE__*/_react.default.createElement(_ui.Tooltip, {
    placement: "top",
    portal: "editor",
    disabled: !tooltipEnabled,
    content: tooltipEnabled && /*#__PURE__*/_react.default.createElement(TooltipBox, {
      padding: 2
    }, /*#__PURE__*/_react.default.createElement(_legacyParts.Markers, {
      markers: markers,
      renderCustomMarkers: renderCustomMarkers
    }))
  }, /*#__PURE__*/_react.default.createElement(Root, {
    "data-focused": focused ? '' : undefined,
    "data-invalid": hasErrors ? '' : undefined,
    "data-selected": selected ? '' : undefined,
    "data-markers": hasMarkers ? '' : undefined,
    "data-warning": hasWarnings ? '' : undefined,
    "data-testid": "pte-block-object",
    "data-image-preview": isImagePreview ? '' : undefined,
    flex: 1,
    onDoubleClick: handleClickToOpen,
    padding: isImagePreview ? 0 : 1,
    ref: elementRef,
    tone: tone
  }, /*#__PURE__*/_react.default.createElement(BlockPreview, {
    ref: blockRef
  }, blockPreview)))), renderBlockActions && /*#__PURE__*/_react.default.createElement(BlockActionsOuter, {
    marginRight: 1
  }, /*#__PURE__*/_react.default.createElement(BlockActionsInner, null, block && focused && !readOnly && /*#__PURE__*/_react.default.createElement(_BlockActions.BlockActions, {
    onChange: onChange,
    block: block,
    renderBlockActions: renderBlockActions
  }))), isFullscreen && /*#__PURE__*/_react.default.createElement(ChangeIndicatorWrapper, null, /*#__PURE__*/_react.default.createElement(StyledChangeIndicatorWithProvidedFullPath, {
    compareDeep: true,
    value: block,
    hasFocus: focused,
    path: blockPath
  })));
}