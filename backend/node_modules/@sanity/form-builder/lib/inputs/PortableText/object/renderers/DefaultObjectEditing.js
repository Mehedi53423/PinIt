"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultObjectEditing = DefaultObjectEditing;

var _react = _interopRequireWildcard(require("react"));

var _autoId = require("@reach/auto-id");

var _presence = require("@sanity/base/presence");

var _ui = require("@sanity/ui");

var _FormBuilderInput = require("../../../../FormBuilderInput");

var _constants = require("./constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DefaultObjectEditing(props) {
  var focusPath = props.focusPath,
      markers = props.markers,
      object = props.object,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onClose = props.onClose,
      onFocus = props.onFocus,
      path = props.path,
      presence = props.presence,
      readOnly = props.readOnly,
      type = props.type,
      _props$width = props.width,
      width = _props$width === void 0 ? 'medium' : _props$width;
  var dialogId = (0, _autoId.useId)();
  var handleChange = (0, _react.useCallback)(patchEvent => onChange(patchEvent, path), [onChange, path]);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      rootElement = _useState2[0],
      setRootElement = _useState2[1];

  var _useLayer = (0, _ui.useLayer)(),
      isTopLayer = _useLayer.isTopLayer;

  var handleClose = (0, _react.useCallback)(() => {
    if (isTopLayer) onClose();
  }, [isTopLayer, onClose]);
  var handleKeyDown = (0, _react.useCallback)(event => {
    if (event.key === 'Escape') handleClose();
  }, [handleClose]);
  (0, _react.useEffect)(() => {
    if (rootElement) rootElement.addEventListener('keydown', handleKeyDown);
    return () => {
      if (rootElement) rootElement.removeEventListener('keydown', handleKeyDown);
    };
  }, [handleKeyDown, rootElement]);
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: dialogId || '',
    onClose: onClose,
    header: type.title,
    portal: "default",
    ref: setRootElement,
    width: _constants.DIALOG_WIDTH_TO_UI_WIDTH[width]
  }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    focusPath: focusPath,
    level: 0,
    markers: markers,
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    path: path,
    presence: presence,
    readOnly: readOnly || type.readOnly,
    type: type,
    value: object
  }))));
}